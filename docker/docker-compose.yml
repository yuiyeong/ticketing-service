name: ticketing
services:
    app:
        build:
            context: ..
            dockerfile: docker/Dockerfile.local
        volumes:
            - ..:/app
            - ../.gradle:/root/.gradle
        ports:
            - "8080:8080"
        environment:
            - SPRING_DATASOURCE_URL=${DB_URL}
            - SPRING_DATASOURCE_USERNAME=${DB_USERNAME}
            - SPRING_DATASOURCE_PASSWORD=${DB_PASSWORD}
            - SPRING_DATA_REDIS_HOST=${REDIS_HOST}
            - SPRING_DATA_REDIS_PORT=${REDIS_PORT}
        command: ./gradlew bootRun
        depends_on:
            db:
                condition: service_healthy
            redis:
                condition: service_healthy
        healthcheck:
            test: [ "CMD", "curl", "-f", "http://localhost:8080/actuator/health" ]
            interval: 30s
            timeout: 10s
            retries: 5
        deploy:
            resources:
                limits:
                    cpus: '2'
                    memory: 4G
                reservations:
                    cpus: '1'
                    memory: 2G
        networks:
            - backend

    db:
        image: mysql:8.0
        volumes:
            - mysql-data:/var/lib/mysql
            - ../sql:/docker-entrypoint-initdb.d
        ports:
            - "3306:3306"
        environment:
            MYSQL_DATABASE: ${MYSQL_DATABASE}
            MYSQL_ROOT_PASSWORD: ${MYSQL_ROOT_PASSWORD}
        command: --character-set-server=utf8mb4 --collation-server=utf8mb4_unicode_ci
        healthcheck:
            test: [ "CMD", "mysqladmin", "ping", "-h", "localhost" ]
            interval: 10s
            timeout: 5s
            retries: 5
        deploy:
            resources:
                limits:
                    cpus: '2'
                    memory: 4G
                reservations:
                    cpus: '1'
                    memory: 2G
        networks:
            - backend

    redis:
        image: redis:6.2-alpine
        volumes:
            - redis-data:/data
        ports:
            - "6379:6379"
        command: redis-server --notify-keyspace-events KEA
        depends_on:
            db:
                condition: service_healthy
        healthcheck:
            test: [ "CMD", "redis-cli", "ping" ]
            interval: 10s
            timeout: 5s
            retries: 5
        deploy:
            resources:
                limits:
                    cpus: '2'
                    memory: 2G
                reservations:
                    cpus: '1'
                    memory: 1G
        networks:
            - backend


    mysql-exporter:
        image: prom/mysqld-exporter:v0.15.1
        volumes:
            - ./my.cnf:/etc/mysqld-exporter/.my.cnf
        ports:
            - "9104:9104"
        environment:
            - DATA_SOURCE_NAME=${DB_USERNAME}:${DB_PASSWORD}@(db:3306)/
        command:
            - '--config.my-cnf=/etc/mysqld-exporter/.my.cnf'
        depends_on:
            db:
                condition: service_healthy
        deploy:
            resources:
                limits:
                    cpus: '1'
                    memory: 512M
                reservations:
                    cpus: '0.5'
                    memory: 256M
        networks:
            - backend

    prometheus:
        image: prom/prometheus:v2.53.1
        volumes:
            - ./prometheus.yml:/etc/prometheus/prometheus.yml
            - prometheus-data:/prometheus
        ports:
            - "9090:9090"
        command:
            - '--config.file=/etc/prometheus/prometheus.yml'
            - '--storage.tsdb.path=/prometheus'
            - '--web.console.libraries=/usr/share/prometheus/console_libraries'
            - '--web.console.templates=/usr/share/prometheus/consoles'
        deploy:
            resources:
                limits:
                    cpus: '2'
                    memory: 2G
                reservations:
                    cpus: '1'
                    memory: 1G
        networks:
            - backend

    grafana:
        image: grafana/grafana:11.1.1
        volumes:
            - grafana-data:/var/lib/grafana
        ports:
            - "3000:3000"
        environment:
            - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_ADMIN_PASSWORD}
        depends_on:
            - prometheus
        deploy:
            resources:
                limits:
                    cpus: '2'
                    memory: 1G
                reservations:
                    cpus: '1'
                    memory: 512M
        networks:
            - backend

networks:
    backend:
        driver: bridge

volumes:
    mysql-data:
    redis-data:
    prometheus-data:
    grafana-data: